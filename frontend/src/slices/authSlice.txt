// import { createSlice } from '@reduxjs/toolkit';

// const initialState = {
//   userInfo: localStorage.getItem('userInfo')
//     ? JSON.parse(localStorage.getItem('userInfo'))
//     : null, //mine
//   // userInfo: null,
// };

// // const initialState = {
// //   userInfo: localStorage.getItem('userInfo')
// //     ? JSON.parse(localStorage.getItem('userInfo'))
// //     : null,
// // };

// // const initialState = {
// //   userInfo: '',
// // };

// const authSlice = createSlice({
//   name: 'auth',
//   initialState,
//   reducers: {
//     setCredentials: (state, action) => {
//       //userInfo will be sent in the pyload in action
//       //so we can set userInfo to payload
//       state.userInfo = action.payload;
//       localStorage.setItem('userInfo', JSON.stringify(action.payload));
//     },
//   },
// });

// export const { setCredentials } = authSlice.actions;
// export default authSlice.reducers;

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  userInfo: localStorage.getItem('userInfo')
    ? JSON.parse(localStorage.getItem('userInfo'))
    : null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setCredentials: (state, action) => {
      state.userInfo = action.payload;
      localStorage.setItem('userInfo', JSON.stringify(action.payload));
    },
    // logout: (state, action) => {
    //   state.userInfo = null;
    //   // NOTE: here we need to also remove the cart from storage so the next
    //   // logged in user doesn't inherit the previous users cart and shipping
    //   localStorage.clear();
    // },
  },
});

export const { setCredentials } = authSlice.actions;

export default authSlice.reducer;
